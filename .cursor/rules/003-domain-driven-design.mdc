---
description: APPLY Domain-Driven Design principles WHEN modeling business domains TO ensure software aligns with business needs
globs: apps/backend/**
alwaysApply: false
---

# Domain-Driven Design Standards

<version>1.0.0</version>

## Context
- These rules apply to the modeling of business domains
- They ensure software accurately reflects business concepts and processes
- They promote a shared understanding between technical and domain experts
- Reflect business needs in the code.
- Avoid technical function names, favor domain language

## Requirements

### Ubiquitous Language
- Use consistent terminology across code, documentation, and communication
- Name classes, methods, and variables according to the domain language
- Document domain terms in a glossary
- Avoid technical jargon in domain models

### Bounded Contexts
- Identify and define clear boundaries between different domain areas
- Create explicit context maps to document relationships between contexts
- Use different models for the same concept in different contexts when appropriate
- Implement proper integration patterns between bounded contexts

### Domain Models
- Model entities with identity and continuity
- Model value objects for concepts defined by their attributes
- Implement aggregates to enforce consistency boundaries
- Use domain events to represent state changes

### Business Rules
- Encapsulate business rules within domain entities and value objects
- Implement domain services for operations that don't belong to entities
- Use specifications to encapsulate complex query logic
- Validate business rules at the domain level

### Architecture
- Implement a layered architecture with the domain model at the core
- Keep domain logic free from infrastructure concerns
- Use repositories to abstract data access
- Implement factories for complex object creation

## Critical Rules

<critical>
- NEVER create anemic domain models (models without behavior)
- ALWAYS encapsulate business rules within the domain
- NEVER expose domain objects' internal state directly
- ALWAYS use the ubiquitous language in code and communication
</critical>
