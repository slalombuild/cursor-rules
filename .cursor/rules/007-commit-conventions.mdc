---
description: APPLY commit message conventions WHEN creating commits TO ensure clear and consistent version history
globs: 
alwaysApply: false
---

# Commit Message Conventions

<version>1.0.0</version>

## Context
- These rules apply to all commit messages in the project
- They ensure a clear and searchable commit history
- They facilitate automated changelog generation
- They promote consistency across the development team

## Requirements

### Commit Structure
- Use the Conventional Commits format: `<type>(<scope>): <description>`
- Keep the first line under 72 characters
- Write description in imperative, present tense (e.g., "add" not "added")
- Use the body to explain what and why, not how
- Reference issues and pull requests at the end of the body

### Commit Types
- `feature`: A new feature
- `fix`: A bug fix
- `hotfix`: A hot fix
- `docs`: Documentation changes
- `style`: Changes that don't affect code functionality (formatting, etc.)
- `refactor`: Code changes that neither fix bugs nor add features
- `perf`: Performance improvements
- `test`: Adding or correcting tests
- `chore`: Changes to build process, dependencies, etc.

### Commit Scope
- Use scope to indicate the component affected (e.g., `auth`, `api`, `ui`)
- Keep scope names consistent across commits
- Use lowercase for scope names
- Omit scope for changes that affect multiple components

### Breaking Changes
- Mark breaking changes with `!` after type/scope: `feat(api)!: change authentication API`
- Include `BREAKING CHANGE:` in the commit body with explanation
- Provide migration instructions when possible

### Language Standards
- Write all commit messages in English
- Use clear and concise language
- Avoid technical jargon unless necessary
- Be specific about what changed

## Examples

<example>
# Good commit message

feat(auth): implement JWT authentication

- Add JWT token generation and validation
- Create authentication middleware
- Update user repository to support token storage

Closes #123
</example>

<example>
# Good commit message with breaking change

feature(api)!: change response format to follow JSON:API spec

BREAKING CHANGE: API responses now follow the JSON:API specification.
All response objects are now wrapped in a data property and include
type and id fields.

Migration guide: https://example.com/api-migration-guide
</example>

<example type="invalid">
# Bad commit message

fixed stuff

fixed the login bug that was causing problems when users tried to
login with their email, spent a lot of time on this one!
</example>

## Critical Rules

<critical>
- NEVER use vague commit messages
- ALWAYS follow the Conventional Commits format
- ALWAYS write in English
- NEVER mix multiple unrelated changes in a single commit
</critical> 
