---
description: 
globs: 
alwaysApply: true
---

# Naming Conventions Standards

<version>1.0.0</version>

## Context
- These rules apply to all code across the repo
- They ensure consistent and meaningful naming
- They promote code readability and maintainability
- Must adhere to language-specific naming conventions

## Requirements

### General Principles
- Names should be descriptive and reveal intent
- Names should be searchable and pronounceable
- Avoid abbreviations except for common ones (e.g., ID, HTTP)
- Use consistent terminology across the codebase

### Files and Directories
- Use kebab-case for file and directory names (e.g. `user-profile`)
- Group files by feature/domain rather than type (e.g. `users/user-profile/`)
- Use suffixes to indicate file type/purpose (e.g., `.component.tsx`, `.service.ts`)
- Keep file names consistent with the primary export

### Classes and Interfaces
- Use PascalCase for class and interface names (e.g. `UserProfile`)
- Use nouns or noun phrases for class names
- No class prefix (e.g `I` like `IUser`) or suffix (e.g `type` like `UserType`) 
- Use descriptive suffixes for specific types (e.g., `DeleteUserCommand`, `FindAllUsersCommand`)

### Functions and Methods
- Use camelCase for function and method names (e.g. `findAll()`)
- Use verb or verb phrases for functions that perform actions
- Use noun or noun phrases for functions that return values
- Prefix boolean getters with `is`, `has`, or `should`

### Variables and Properties
- Use camelCase for variable and property names (e.g. `userProfile: UserProfile;`)
- Use meaningful and specific names
- Avoid single-letter names except for counters or temporary variables
- Use plural names for arrays and collections

### Constants
- Use UPPER_SNAKE_CASE for constants (e.g. `MAX_CONNECTIONS_ALLOWED`)
- Define constants at the appropriate scope
- Group related constants in `enum` or `object`
- Use descriptive names that indicate purpose
 
## Critical Rules

<critical>
- NEVER use single-letter names except for counters or temporary variables
- ALWAYS use descriptive names that reveal intent
- NEVER mix naming conventions within the same codebase
- ALWAYS use consistent casing for each type of identifier
</critical>
