---
description: APPLY TypeScript best practices WHEN writing code TO ensure type safety, readability, and maintainability
globs: *.ts
alwaysApply: false
---

# TypeScript Standards

<version>1.0.0</version>

## Context
- These rules apply to all TypeScript code in the project
- They ensure consistency, type safety, and maintainability
- They complement ESLint rules and TSConfig settings
- They apply to both frontend and backend

## Requirements

### Strict Types
- Always type function params and returns.
- Always enable `strict: true` in tsconfig.json
- Avoid using `any` and `unknown` except in documented exceptional cases
- Never use the `as` operator for type conversions
- Prefer type assertions with guards (`is`, `instanceof`, etc.)
- Use generic types for reusable functions

### Interfaces and Types
- Use `interface` for objects that can be extended
- Use `type` for unions, intersections, and primitive types

### Nullability
- Avoid `null` or `undefined` values in return types
- Use union types with `undefined` for optional values
- Use the nullish coalescing operator (`??`) for default values
- Use the optional chaining operator (`?.`) for safe access

### Enumerations
- Prefer string literal unions to enums when possible
- If enums are necessary, use const enums to optimize generated code
- Always explicitly define enum values

### Lint & Error
- Follow `@typescript-eslint/strict-boolean-expressions` (avoid `if(!obj)`, prefer `if (obj === undefined)`).
- Type errors with `catch(error: unknown | Error)`.

### Generics
- Use descriptive names for type parameters (not just `T`)
- Constrain generics when possible (`<T extends BaseType>`)
- Use generics for reusable utility functions
- Document complex type parameters

### Type Inference
- Let TypeScript infer simple types
- Explicitly declare types for public APIs
- Explicitly declare types for complex data structures
- Use `ReturnType<typeof func>` to infer complex return types

### Imports and Exports
- Use named imports rather than default imports
- Group imports by origin (internal, external, relative)
- Export types and interfaces used outside the module
- Use barrel files (index.ts) to simplify imports

## Examples

<example>
// Good type usage

// Interface for an extensible object
interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user' | 'guest'; // String literal union instead of enum
}

// Type for a union
type Result<T> = 
  | { status: 'success'; data: T }
  | { status: 'error'; error: Error };

// Generic function with constraint
function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
  return obj[key];
}

// Type guard
function isUser(value: unknown): value is User {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'name' in value &&
    'email' in value &&
    'role' in value
  );
}

// Nullish coalescing and optional chaining
function displayUserName(user?: User): string {
  return user?.name ?? 'Anonymous';
}
</example>

<example type="invalid">
// Bad type usage

// Using any
function processData(data: any): any {
  return data.map(item => item.value);
}

// Using as
function getUserId(user: unknown): string {
  return (user as any).id;
}

// Unnecessary I prefix
interface IUser {
  id: string;
  name: string;
}

// Enum without explicit values
enum UserRole {
  Admin,
  User,
  Guest
}

// No explicit return type for public API
export function fetchUsers() {
  // ...
}

// Using null instead of undefined
function getUser(id: string): User | null {
  // ...
}
</example>

## Critical Rules

<critical>
- NEVER use `any` type without explicit justification
- ALWAYS define return types for public functions and methods
- NEVER use type assertions (`as`) when type guards can be used
- ALWAYS use strict null checking
- NEVER disable TypeScript strict mode
</critical> 
