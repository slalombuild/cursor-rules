---
description: Use ALWAYS when asked to CREATE A RULE, UPDATE A RULE, or when taught a lesson by the user that should be retained as a new rule for Cursor
globs: .cursor/rules/*.mdc
alwaysApply: false
---
# Cursor Rules Format
## Template Structure for Rule Files

```mdc
---
description: ACTION when TRIGGER to OUTCOME
globs: .cursor/rules/**/*.mdc
alwaysApply: {true or false}
---

# Rule Title

## Context
- When to apply this rule
- Prerequisites or conditions

## Requirements
- Concise, actionable items
- Each requirement must be testable

## Examples
<example>
Good concise example with explanation
</example>

<example type="invalid">
Invalid concise example with explanation
</example>

## Critical Rules
  - Always do X
  - NEVER do Y
```

## File Organization

### Location
- Path: `.cursor/rules/`
- Extension: `.mdc`

### Naming Convention
PREFIX-name.mdc where PREFIX is:
- 0XX: Core standards
- 1XX: Tool configs
- 3XX: Testing standards
- 1XXX: Language rules (e.g., C#)
- 2XXX: Framework rules (e.g., React)
- 7XX: System rules (e.g., GitHub)
- 8XX: Workflows
- 9XX: Templates
- _name.mdc: Private rules

### Glob Pattern Examples
Common glob patterns for different rule types:
- Core standards: .cursor/rules/*.mdc
- Language rules: src/**/*.{js,ts}
- Testing standards: **/*.test.{js,ts}
- React components: src/components/**/*.tsx
- Documentation: docs/**/*.md
- Configuration files: *.config.{js,json}
- Build artifacts: dist/**/*
- Multiple extensions: src/**/*.{js,jsx,ts,tsx}
- Multiple files: dist/**/*, docs/**/*.md

## Required Fields

### Frontmatter
- description: ACTION TRIGGER OUTCOME format
- globs: `glob pattern for files and folders`
- alwaysApply: {true or false} – when true, will be attached to every conversation (but frontmatter is still important for it to be used!)
- dependencies: `400-md-docs.mdc` – specify dependent rules
- priority: 10 – set specific prioritization for the rule, useful for setting high-priority rules (such as security guidance)

### Body
- context: Usage conditions
- requirements: Actionable items
- examples: Both valid and invalid
- critical-rules: Summary of short rule bullets that are the most critical to abide by

## Formatting Guidelines

- Use concise Markdown primarily
- Use some XML tags limited to:
  - <example>
  - <danger>
  - <required>
- Always indent content within XML or nested XML tags by 2 spaces
- Emojis and Mermaid diagrams are allowed if they are not redundant and better explain the rule for AI comprehension.


## Critical Rules
  - Keep frontmatter description under 120 characters (or fewer) while maintaining clear intent for rule selection by the AI agent
  - Keep the rule DRY – do not repeat, be redundant, or overly explanatory
  - Use succinct Markdown the agent can easily understand
  - The frontmatter MUST ALWAYS have `description`, `globs`, and `alwaysApply`, (keys and values unquoted) even if the value is null
  - Use standard glob patterns without quotes (e.g., *.js, src/**/*.ts)
  - TRY to keep the total rule line count under 50—better under 25 lines—unless there are diagrams or longer required examples, which may increase the total line count
  - Always include a valid and invalid example
  - Quotes are not needed around glob patterns
