---
description: APPLY project-specific rules TO ensure consistent documentation across projects
globs: **/*
alwaysApply: true
---

# Project-Specific Rules Template

<version>1.0.0</version>

## Context
- This file is used as specification only for this project

## Recommendation

### Overall Architecture
- *Project structure*: monorepo, modules, packages
- *Architectural patterns used*: (Clean Architecture for backend, Feature-based for frontend, Shared DTO between frontend and backend in packages/shared-types)

### Authentication
- *Authentication mechanisms used*: Google Oauth2 + JWT, Remix Server + Client for data fetching
- *Authentication flow*: once authenticated on Google, we use JWT with accessToken for auth
- *Session and token management*: accessToken is refreshed every 15 minutes in a dedicated route using refreshToken is cookie

### State Management
- *State management approach*: MobX
- *Organization of stores/reducers*: only stores
- *Patterns for state updates*: state and domain entirely managed by Mobx, never React Components

### API and Services
- *Service structure*: `services/` contains API calls in frontend
  - Never use `fetch` directly, always use [api-fetcher.ts](mdc:apps/frontend/app/lib/api-fetcher.ts) from [api-auth.ts](mdc:apps/frontend/app/lib/api-auth.ts) inside services like [email.service.ts](mdc:apps/backend/src/infrastructure/email/email.service.ts)
- *API call convention*s: check [swagger.json](mdc:apps/backend/swagger.json)
- *Error handling and retries*: [error.class.ts](mdc:packages/shared-types/src/error.class.ts) must be used.

### Testing
- *Testing strategy*: unit first, integration then, e2e last
- *Testing tools and frameworks*: `vitest` for frontend with `happy-dom`, never use `Jest` on frontend, `Jest` is only for backend.
- *Mocking and fixture conventions*: only mock API calls in frontend

## Custom for this project

### Backend

#### Controllers
- Use [api-response.decorator.ts](mdc:apps/backend/src/infrastructure/http/api-response.decorator.ts) and [api-response-redirect.decorator.ts](mdc:apps/backend/src/infrastructure/http/api-response-redirect.decorator.ts) instead of Swagger annotations.

### Frontend

#### Tests
- When needed use http fetch, use [auth-test.helper.ts](mdc:apps/backend/src/tests/auth-test.helper.ts) to authenticated user.

### Shared-Typed
- DTO are located in `packages/shared-types` and shared between backend (e.g. controllers) and frontend (e.g loaders or services)
- Most of the validation is done with `class-validator`.
- One file per type, export everything from [index.ts](mdc:packages/shared-types/src/index.ts)

### Applications and Packages
- Always use `pnpm` instead of `npm` or `yarn`

| Application  | Path  | Description  |
|-------------|--------|-------------|
| Monorepo Root | `/package.json` | Global monorepo configuration, shared scripts, and common development dependencies |
| Frontend | `/apps/frontend/package.json` | Remix frontend application with React 19, MobX, and Tailwind |
| Backend | `/apps/backend/package.json` | NestJS API with Prisma, authentication, and external integrations |
| Shared Types | `/packages/shared-types/package.json` | Shared types between frontend and backend |

### Critical Dependencies

| Package | Version | Application | Description |
|---------|---------|-------------|-------------|
| React | 19.0.0 | Frontend | Main UI library |
| Remix | 2.16.0 | Frontend | Fullstack React framework |
| MobX | 6.13.6 | Frontend | Reactive state management |
| Tailwind CSS | 4.0.12 | Frontend | Utility-first CSS framework |
| NestJS | 11.0.11 | Backend | Node.js backend framework |
| Prisma | 6.4.1 | Backend | ORM and database client |
| TypeScript | 5.8.2 | All | Strongly typed programming language |
| Vite | 6.2.1 | Frontend | Build tool and development server |
| ESLint | 9.22.0 | All | JavaScript/TypeScript linter |
| Prettier | 3.5.3 | All | Code formatter |

## Critical Rules

<critical>
- ALWAYS follow project-specific conventions
- NEVER bypass established architectural patterns
- ALWAYS respect project naming standards
- NEVER duplicate business logic between layers
- ALWAYS document important architectural decisions
</critical> 
