---
description: APPLY Clean Architecture principles WHEN organizing code TO ensure separation of concerns and testability
globs: apps/backend/**
alwaysApply: false
---

# Clean Architecture Standards

<version>1.1.0</version>

## Context
- These rules apply to the overall architecture of applications in the monorepo
- They ensure proper separation of concerns
- They promote testability and maintainability
- Backend follows Clean Architecture principles
- Frontend follows Feature-based Architecture principles

## Backend Architecture (Clean Architecture)

### Layers
- Separate code into distinct layers: Domain, Application, Infrastructure, and Presentation
- Ensure dependencies point inward (Presentation → Application → Domain)
- Keep the Domain layer independent of frameworks and external concerns
- Use interfaces to define boundaries between layers

### Domain Layer
- Focus on business entities and logic
- Keep domain models pure and framework-independent
- Implement domain services for complex business operations
- Define repository interfaces in the domain layer

### Application Layer
- Implement use cases that orchestrate domain logic
- Keep application services focused on a single responsibility
- Use DTOs for data transfer between layers
- Implement proper validation at the application layer

### Infrastructure Layer
- Implement repository interfaces defined in the domain layer
- Handle external concerns like databases, APIs, and file systems
- Keep infrastructure details isolated from business logic
- Use adapters to integrate with external systems

### Presentation Layer
- Focus on API concerns and request/response handling
- Keep presentation logic separate from business logic
- Use controllers to handle HTTP requests
- Implement proper error handling and response formatting

## Critical Rules

<critical>
- NEVER allow outer layers to depend on inner layers in backend architecture
- ALWAYS define clear boundaries between layers
- NEVER mix business logic with infrastructure concerns
- ALWAYS organize frontend code by features, not technical concerns
- NEVER mix feature concerns in frontend components
- ALWAYS keep feature-specific code within its feature directory
</critical>
